{"meta":{"title":"ZAZA BLOG","subtitle":"知行合一，止于至善","description":null,"author":"despot-zaza","url":"http://despot-zaza.github.io"},"pages":[{"title":"about","date":"2017-05-09T03:10:17.000Z","updated":"2017-05-09T03:10:17.170Z","comments":true,"path":"about/index.html","permalink":"http://despot-zaza.github.io/about/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"categories","date":"2017-05-09T06:00:17.000Z","updated":"2017-05-09T06:01:21.612Z","comments":false,"path":"categories/index.html","permalink":"http://despot-zaza.github.io/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"Tags","date":"2017-05-09T05:32:43.000Z","updated":"2017-05-09T10:08:35.179Z","comments":false,"path":"tags/index.html","permalink":"http://despot-zaza.github.io/tags/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"Maven学习笔记","slug":"Maven学习笔记","date":"2017-05-09T10:05:00.000Z","updated":"2017-05-09T10:07:14.058Z","comments":true,"path":"2017/05/09/Maven学习笔记/","link":"","permalink":"http://despot-zaza.github.io/2017/05/09/Maven学习笔记/","excerpt":"","text":"Maven常用的构建命令 mvn -v 查看maven版本 compile 编译 test 测试 package 打包 clean 删除target install 安装jar包到本地仓库 Maven自动建立目录骨架 创建目录的两种方式：archetype:generate 按照提示进行选择archetype:generate -DgroupId=组织名，公司网址的反写+项目名 -DartifactId=项目名+模块名 -Dversion=版本号 -Dpackage=代码所存在的包 Maven中坐标和仓库的概念 构建：在maven世界中任何一个依赖、插件、项目构建的输出都可以被称为构建。 坐标：所有构建通过坐标作为其唯一标识。就好像我们的工作单位或家庭地址。 仓库：用来管理项目的依赖，分为本地仓库和远程仓库。默认地址在maven\\lib\\maven-model-builder.jar解压打开后里面org\\apache\\maven\\model\\pom-4.0.0.xml。这是maven提供的超级pom，所有的maven项目都会继承这个pom。打开这个文件后&lt;repository&gt;标签内&lt;url&gt;标签就是默认的全球的中央仓库的地址，可以用浏览器打开，在里面可找到大部分的开源的java项目。 镜像仓库修改镜像仓库的位置：打开maven\\conf\\settings.xml 找到根据示例修改，下面是一个国内镜像仓库的demo 123456&lt;mirror&gt; &lt;id&gt;maven.net.cn&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; * &lt;name&gt;central mirror in china&lt;/name&gt; &lt;url&gt;http://maven.net.cn/content/groups/public&lt;/url&gt;&lt;/mirror&gt; 更改仓库的位置默认仓库位置路径：C:\\Users\\username.m2\\repository修改时还是打开maven\\conf\\settings.xml，找到&lt;localRepository&gt; Maven的生命周期和插件 完整的项目构建过程包括：清理、编译、测试、打包、集成测试、验证、部署clean、compile、test、package、install maven生命周期clean 清理项目 pre-clean 执行清理前的工作 clean清理上一次构建生成的所有文件 post-clean执行清理后的文件 default 构建项目（最核心） compile test package install site 生成项目站点 pre-site 在生成项目站点前要完成的工作 site 生成项目的站点文档 post-site 在生成项目站点后要完成的工作 site-deploy 发布生成的站点到服务器上 三块生命周期彼此独立 Maven依赖范围 maven中提供了三种classpath:1、编译2、测试3、运行将&lt;scope&gt;test&lt;/scope&gt;设置为test时则只存在于测试范围中，依赖范围就是用来控制和三种classpath的关系 scope具体属性：(可参考maven.apache.org官网guide)compile：默认的范围，编译、测试、运行都有效provide：在编译和测试时有效runtime：在测试和运行时有效test：只在测试时有效system：与本机系统相关联，可移植性差import：导入的范围，它只使用在dependencyManagement中，表示从其他的pom中导入dependency的配置 Maven依赖传递 Maven的依赖&lt;dependency&gt;默认会向下集成，如果构建想去除依赖可以使用&lt;exclusion&gt;标签。 补充小知识： maven默认采用jdk1.5，那如何采用1.8的版本？需要要修改settings.xml中找到&lt;profile&gt;将其中改为对应版本即可 Maven依赖冲突 1、短路优先 A-&gt;B-&gt;C-&gt;X(jar)A-&gt;D-&gt;X(jar)优先解析路径短的版本 2、先声明先优先如果路径长度相同，则谁先声明，先解析谁 聚合和继承 聚合&lt;modules&gt;标签，将需要聚合的类加入&lt;module&gt; 继承父POM中将dependencies中的放入dependencyManagement，并在properties中声明版本号等属性信息。子POM中加入父POM的坐标，在依赖中写入基本的坐标名即可。 附录 Maven pom.xml文件解析 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt; &lt;!-- 指定了当前pom的版本 --&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;反写的公司网址+项目名&lt;/groupId&gt; &lt;artifactId&gt;项目名+模块名&lt;/artifactId&gt; &lt;!-- 第一个0表示大版本号 第二个0表示分支版本号 第三个0表示小版本号 0.0.1 snapshot 表示快照版本 alpha 表示内部版本 beta 表示公测版本 Release 表示稳定版本 GA 表示正式发布版本 --&gt; &lt;version&gt;当前项目的版本号&lt;/version&gt; &lt;!-- 默认是jar war zip pom --&gt; &lt;packaging&gt;&lt;/packaging&gt; &lt;!-- 项目描述名，产生项目文档时才会使用 --&gt; &lt;name&gt;&lt;/name&gt; &lt;!-- 项目的地址 --&gt; &lt;url&gt;&lt;/url&gt; &lt;!-- 项目描述 --&gt; &lt;description&gt;&lt;/description&gt; &lt;!-- 开发人员信息 --&gt; &lt;developers&gt;&lt;/developers&gt; &lt;!-- 项目授权信息 --&gt; &lt;licenses&gt;&lt;/licenses&gt; &lt;!-- 项目组织信息 --&gt; &lt;organization&gt;&lt;/organization&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;&lt;/groupId&gt; &lt;artifactId&gt;&lt;/artifactId&gt; &lt;version&gt;&lt;/version&gt; &lt;type&gt;&lt;/type&gt; &lt;!-- 依赖范围 --&gt; &lt;scope&gt;&lt;/scope&gt; &lt;!-- 设置依赖是否可选，只有ture和false，默认为false --&gt; &lt;optional&gt;&lt;/optional&gt; &lt;!-- 排除依赖传递的列表 --&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- 依赖管理 --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;!-- 通常对构建的行为提供插件的支持 --&gt; &lt;build&gt; &lt;!-- 插件列表 --&gt; &lt;plugins&gt; &lt;groupId&gt;&lt;/groupId&gt; &lt;artifactId&gt;&lt;/artifactId&gt; &lt;version&gt;&lt;/version&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;!-- 子模块对父模块的集成 --&gt; &lt;parent&gt;&lt;/parent&gt; &lt;!-- 聚合运行多个modules项 --&gt; &lt;modules&gt; &lt;module&gt;&lt;/module&gt; &lt;/modules&gt;&lt;/project&gt;","raw":null,"content":null,"categories":[{"name":"code","slug":"code","permalink":"http://despot-zaza.github.io/categories/code/"}],"tags":[{"name":"java","slug":"java","permalink":"http://despot-zaza.github.io/tags/java/"},{"name":"maven","slug":"maven","permalink":"http://despot-zaza.github.io/tags/maven/"},{"name":"build","slug":"build","permalink":"http://despot-zaza.github.io/tags/build/"},{"name":"DEVOPS","slug":"DEVOPS","permalink":"http://despot-zaza.github.io/tags/DEVOPS/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-09T03:19:20.000Z","updated":"2017-05-09T06:55:56.500Z","comments":true,"path":"2017/05/09/hello-world/","link":"","permalink":"http://despot-zaza.github.io/2017/05/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":null,"content":null,"categories":[{"name":"code","slug":"code","permalink":"http://despot-zaza.github.io/categories/code/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://despot-zaza.github.io/tags/hexo/"}]},{"title":"搭建ngrok将你的应用发布到公网上吧","slug":"搭建ngrok将你的应用发布到公网上吧","date":"2017-05-09T02:44:51.000Z","updated":"2017-05-09T11:53:30.144Z","comments":true,"path":"2017/05/09/搭建ngrok将你的应用发布到公网上吧/","link":"","permalink":"http://despot-zaza.github.io/2017/05/09/搭建ngrok将你的应用发布到公网上吧/","excerpt":"","text":"环境准备 首先需要下载go环境，这里是下载的 go1.8.linux-amd64.tar.gz 的版本，其他版本可以在GO的官方网站复制对应的下载链接 1wget http://www.golangtc.com/static/go/1.8/go1.8.linux-amd64.tar.gz 将下载完的压缩解压到服务器 /usr/local/go 即可，然后将/usr/local/go/bin/* 复制到 /usr/bin/ 1cd /usr/local/src/ 下载ngrok源代码,在github上能够搜到ngrok项目的最新版本 1git clone https://github.com/inconshreveable/ngrok.git 设置GOPATH环境变量 1export GOPATH=/usr/local/src/ngrok/ 设置域名变量，为了后续方便，建议这里使用一级域名，因为ngrok会需要你的二级域名做为host（client不填二级域名的话ngrok会随机给你分配一个二级域名） 1export NGROK_DOMAIN=\"yourdomain.com\" 打开ngrok目录，环境准备完成 1cd ngrok 开始编译 首先为根域名生成证书 1openssl genrsa -out rootCA.key 2048 12openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pemopenssl genrsa -out device.key 2048 12openssl req -new -key device.key -subj \"/CN=$NGROK_DOMAIN\" -out device.csropenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 123cp rootCA.pem assets/client/tls/ngrokroot.crtcp device.crt assets/server/tls/snakeoil.crt cp device.key assets/server/tls/snakeoil.key 编译服务端比较容易，先指定一下环境变量，然后再make： 1GOOS=linux GOARCH=amd64 1make release-server 编译成功后，应该可以在 /usr/local/src/ngrok/bin 下生成了一个 ngrokd 可执行文件，这就是我们的服务端了，现在启动服务端试试： 1bin/ngrokd -domain=\"$NGROK_DOMAIN\" -httpAddr=\":80\" 如果没有报错的话，会出现以下输出： 12345[10:05:48 CST 2015/04/17] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified[10:05:48 CST 2015/04/17] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds[10:05:48 CST 2015/04/17] [INFO] (ngrok/log.Info:112) Listening for public http connections on [::]:8000[10:05:48 CST 2015/04/17] [INFO] (ngrok/log.Info:112) Listening for public https connections on [::]:443[10:05:48 CST 2015/04/17] [INFO] (ngrok/log.Info:112) Listening for control and proxy connections on [::]:4443 编译客户端 现在先 ctrl+c 退出，我们还需要编译客户端呢。首先编译linux客户端： 123cd /usr/local/src/ngrokGOOS=linux GOARCH=amd64 make release-client 同理，这里的amd64是64位系统，32位改成386#应该会在 bin/ 目录下生成ngrok客户端程序 如果是windows下的客户端，是这样的： windows 环境有点小问题，需要go1.4版本才可以执行这里后续再更新详细步骤12345cd /usr/local/go/srcGOOS=windows GOARCH=amd64 ./make.bashcd -GOOS=windows GOARCH=amd64 make release-client 同理，这里的amd64是64位系统，32位改成386#应该会在 bin/windows_amd64 目录下生成ngrok客户端程序 运行客户端 现在我们来到自己电脑上，通过scp命令将客户端文件复制到本地，并准备启动客户端。在启动之前，我们需要为客户端编写一个配置文件 ngrok.cfg ： 12server_addr: \"ngrok.yourdomain.com:4443\"trust_host_root_certs: false 然后启动客户端，假设我们要分配一个二级域名 test.yourdomain.com 执行以下命令： 1./ngrok -config=./ngrok.cfg -subdomain=test 80 解释一下参数：-config 就是上面配置文件ngrok.cfg的路径-subdomain 就是需要分配域名的前缀部分80 就是本机websever的端口，比如apache监听的端口，一会ngrok会将请求映射到该端口上。 如果没错误，应该会出现以下的输出： 1234567Tunnel Status onlineVersion 1.7/1.7Forwarding http://test.ngrok.ekan001.com:8000 -&gt; 127.0.0.1:80Forwarding https://test.ngrok.ekan001.com:8000 -&gt; 127.0.0.1:80Web Interface 127.0.0.1:4040# Conn 0Avg Conn Time 0.00ms 加入开机启动项 由于我的服务端是Ubuntu的环境，运行在其他操作上的小伙伴可以参考下：rc.local脚本是一个ubuntu开机后会自动执行的脚本，我们可以在该脚本内添加命令行指令。该脚本位于/etc/路径下，需要root权限才能修改。该脚本具体格式如下： 将如下命令添加到脚本中即可开机自启动 1/usr/local/src/ngrok/bin/ngrokd -domain=\"yourdomain.com\" -httpAddr=\":80\"","raw":null,"content":null,"categories":[{"name":"tool","slug":"tool","permalink":"http://despot-zaza.github.io/categories/tool/"}],"tags":[{"name":"ngrok","slug":"ngrok","permalink":"http://despot-zaza.github.io/tags/ngrok/"},{"name":"deploy","slug":"deploy","permalink":"http://despot-zaza.github.io/tags/deploy/"}]}]}